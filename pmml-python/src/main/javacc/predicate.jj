/*
 * Copyright (c) 2018 Villu Ruusmann
 *
 * This file is part of JPMML-Python
 *
 * JPMML-Python is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPMML-Python is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with JPMML-Python.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.8";
	STATIC = false;
	BUILD_TOKEN_MANAGER = false;
}

PARSER_BEGIN(PredicateTranslator)
package org.jpmml.python;

import java.util.ArrayList;
import java.util.List;

import org.dmg.pmml.Apply;
import org.dmg.pmml.Array;
import org.dmg.pmml.CompoundPredicate;
import org.dmg.pmml.DataType;
import org.dmg.pmml.Expression;
import org.dmg.pmml.False;
import org.dmg.pmml.FieldRef;
import org.dmg.pmml.PMMLFunctions;
import org.dmg.pmml.Predicate;
import org.dmg.pmml.SimplePredicate;
import org.dmg.pmml.SimpleSetPredicate;
import org.dmg.pmml.True;
import org.jpmml.converter.Feature;
import org.jpmml.converter.PMMLUtil;
import org.jpmml.converter.TypeUtil;

public class PredicateTranslator extends AbstractTranslator {

	public PredicateTranslator(Scope scope){
		this(new NullProvider());

		setScope(scope);
	}

	public Predicate translatePredicate(String string){
		ReInit(new StringProvider(string));

		Predicate predicate;

		try {
			predicate = translatePredicateInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python predicate \'" + string + "\' is either invalid or not supported", pe);
		}

		return predicate;
	}

	static
	private SimplePredicate.Operator translateRelationalOperator(Token operator) throws ParseException {

		switch(operator.kind){
			case EQUAL:
				return SimplePredicate.Operator.EQUAL;
			case NOT_EQUAL:
				return SimplePredicate.Operator.NOT_EQUAL;
			case LESS_THAN:
				return SimplePredicate.Operator.LESS_THAN;
			case LESS_OR_EQUAL:
				return SimplePredicate.Operator.LESS_OR_EQUAL;
			case GREATER_THAN:
				return SimplePredicate.Operator.GREATER_THAN;
			case GREATER_OR_EQUAL:
				return SimplePredicate.Operator.GREATER_OR_EQUAL;
			default:
				throw new ParseException();
		}
	}

	static
	private String getOnlyArgument(Apply apply){
		List<Expression> expressions = apply.getExpressions();

		ClassDictUtil.checkSize(1, expressions);

		FieldRef fieldRef = (FieldRef)expressions.get(0);

		return fieldRef.requireField();
	}

	static
	private Array createArray(List<?> values){
		DataType dataType = TypeUtil.getDataType(values, DataType.STRING);

		switch(dataType){
			case INTEGER:
				return PMMLUtil.createIntArray((List)values);
			case FLOAT:
			case DOUBLE:
				return PMMLUtil.createRealArray((List)values);
			default:
				return PMMLUtil.createStringArray(values);
		}
	}

	static
	private SimplePredicate createSimplePredicate(Object left, SimplePredicate.Operator operator, Object right){
		String name = asFieldName(left);
		Object value = (right != null ? asValue(right) : null);

		return new SimplePredicate(name, operator, value);
	}

	static
	private SimpleSetPredicate createSimpleSetPredicate(Object left, SimpleSetPredicate.BooleanOperator booleanOperator, Object right){
		String name = asFieldName(left);
		Array array = (Array)right;

		return new SimpleSetPredicate(name, booleanOperator, array);
	}

	static
	private CompoundPredicate createCompoundPredicate(Predicate left, CompoundPredicate.BooleanOperator booleanOperator, Predicate right){

		if(left instanceof CompoundPredicate){
			CompoundPredicate compoundPredicate = (CompoundPredicate)left;

			if(compoundPredicate.requireBooleanOperator() == booleanOperator){
				compoundPredicate.addPredicates(right);

				return compoundPredicate;
			}
		}

		CompoundPredicate compoundPredicate = new CompoundPredicate(booleanOperator, null)
			.addPredicates(left, right);

		return compoundPredicate;
	}

	static
	private String asFieldName(Object object){

		if(object instanceof Feature){
			Feature feature = (Feature)object;

			return feature.getName();
		} else

		if(object instanceof FieldRef){
			FieldRef fieldRef = (FieldRef)object;

			return fieldRef.requireField();
		} else

		{
			throw new IllegalArgumentException("The left-hand side of the predicate (" + object + ") is not a feature reference");
		}
	}

	static
	private Object asValue(Object object){

		if(object instanceof Boolean){
			return (Boolean)object;
		} else

		if(object instanceof Integer){
			return (Integer)object;
		} else

		if(object instanceof Double){
			return (Double)object;
		} else

		if(object instanceof String){
			return (String)object;
		} else

		{
			throw new IllegalArgumentException("The right-hand side of the predicate (" + object + ") is not a value");
		}
	}

	static
	private Predicate asPredicate(Object object){

		if(object instanceof Predicate){
			Predicate predicate = (Predicate)object;

			return predicate;
		} // End if

		if(object instanceof Apply){
			Apply apply = (Apply)object;

			switch(apply.requireFunction()){
				case PMMLFunctions.ISMISSING:
					return new SimplePredicate(getOnlyArgument(apply), SimplePredicate.Operator.IS_MISSING, null);
				case PMMLFunctions.ISNOTMISSING:
					return new SimplePredicate(getOnlyArgument(apply), SimplePredicate.Operator.IS_NOT_MISSING, null);
				default:
					break;
			}
		} // End if

		if((Boolean.FALSE).equals(object)){
			return False.INSTANCE;
		} else
			
		if((Boolean.TRUE).equals(object)){
			return True.INSTANCE;
		} // End if

		throw new IllegalArgumentException("The expression (" + object + ") is not a predicate");
	}

	static
	private Object asArgument(Object object){

		if(object instanceof Feature){
			Feature feature = (Feature)object;
			
			return feature;
		} else

		{
			throw new IllegalArgumentException("The function argument (" + object + ") is not a feature reference");
		}
	}

	static
	private Object toNegative(Object object) throws ParseException {

		if(object instanceof Boolean){
			return ((Boolean)object).booleanValue() ? -1 : 0;
		} else

		if(object instanceof Integer){
			return -((Integer)object).intValue();
		} else

		if(object instanceof Double){
			return -((Double)object).doubleValue();
		} else

		{
			throw new ParseException();
		}
	}
}
PARSER_END(PredicateTranslator)

@python.tokens@

@python.productions@

private Predicate translatePredicateInternal():
{
	Predicate predicate;
}
{
	predicate = Predicate() <EOF>

	{
		return predicate;
	}
}

private Predicate Predicate():
{
	Predicate predicate;
}
{
	predicate = LogicalOrExpression()

	{
		return predicate;
	}
}

private Predicate LogicalOrExpression():
{
	Predicate left;
	Predicate right;
}
{
	left = LogicalAndExpression() ( <OR> right = LogicalAndExpression() { left = createCompoundPredicate(left, CompoundPredicate.BooleanOperator.OR, right); } )*

	{
		return left;
	}
}

private Predicate LogicalAndExpression():
{
	Predicate left;
	Predicate right;
}
{
	left = ComparisonExpression() ( <AND> right = ComparisonExpression() { left = createCompoundPredicate(left, CompoundPredicate.BooleanOperator.AND, right); } )*

	{
		return left;
	}
}

private Predicate ComparisonExpression():
{
	Object left;
	Token operator = null;
	Object right;
}
{
	left = PrimaryExpression()
	(
		LOOKAHEAD(<IS> <NONE>)
		<IS> <NONE> { left = createSimplePredicate(left, SimplePredicate.Operator.IS_MISSING, null); }
		|
		<IS> <NOT> <NONE> { left = createSimplePredicate(left, SimplePredicate.Operator.IS_NOT_MISSING, null); }
		|
		<IN> right = ListMakerExpression() { left = createSimpleSetPredicate(left, SimpleSetPredicate.BooleanOperator.IS_IN, right); }
		|
		<NOT> <IN> right = ListMakerExpression() { left = createSimpleSetPredicate(left, SimpleSetPredicate.BooleanOperator.IS_NOT_IN, right); }
		|
		(operator = <EQUAL> | operator = <NOT_EQUAL> | operator = <LESS_THAN> | operator = <LESS_OR_EQUAL> | operator = <GREATER_THAN> | operator = <GREATER_OR_EQUAL>) right = UnaryExpression() { left = createSimplePredicate(left, translateRelationalOperator(operator), right); }
		|
		{ left = asPredicate(left); }
	)

	{
		return (Predicate)left;
	}
}

private Object UnaryExpression():
{
	Token sign = null;
	Object result;
}
{
	(
		sign = Sign() result = UnaryExpression()
		|
		result = PrimaryExpression()
	)

	{
		if(sign != null && sign.kind == MINUS){
			result = toNegative(result);
		}

		return result;
	}
}

private Object PrimaryExpression():
{
	String dottedName;
	Object result;
}
{
	(
		dottedName = DottedName()
		(
			result = ArrayIndexingExpression(dottedName)
			|
			result = FunctionInvocationExpression(dottedName)
			|
			result = NameInvocationExpression(dottedName)
		)
		|
		result = ParenthesizedExpression()
		|
		result = LiteralExpression()
	)

	{
		return result;
	}
}

private Feature ArrayIndexingExpression(String dottedName):
{
	Token sign = null;
	Token column;

	Feature feature;
}
{
	(
		LOOKAHEAD(<LBRACKET> (Sign())? <INT>)
		<LBRACKET> (sign = Sign())? column = <INT> <RBRACKET> {
			Scope scope = ensureScope();

			int colIndex = PythonParserUtil.parseInt(sign, column);

			feature = scope.getFeature(dottedName, colIndex);
		}
		|
		<LBRACKET> column = <STRING> <RBRACKET> {
			Scope scope = ensureScope();

			String colName = PythonParserUtil.parseString(column);

			feature = scope.getFeature(dottedName, colName);
		}
	)

	{
		return feature;
	}
}

private Object FunctionInvocationExpression(String dottedName):
{
	List<Object> arguments;
}
{
	arguments = Arguments()

	{
		return encodeFunction(dottedName, arguments);
	}
}

private List<Object> Arguments():
{
	Object argument;
	List<Object> arguments = new ArrayList<>();
}
{
	(
		LOOKAHEAD(<LPAREN> <RPAREN>)
		<LPAREN> <RPAREN>
		|
		<LPAREN> argument = PrimaryExpression() { arguments.add(asArgument(argument)); } ( <COMMA> argument = PrimaryExpression() { arguments.add(asArgument(argument)); } )* <RPAREN>
	)

	{
		return arguments;
	}
}

private Object NameInvocationExpression(String dottedName):
{}
{
	{
		Scope scope = ensureScope();

		Feature feature = scope.getFeature(dottedName);

		return feature;
	}
}

private Predicate ParenthesizedExpression():
{
	Predicate predicate;
}
{
	<LPAREN> predicate = Predicate() <RPAREN>

	{
		return predicate;
	}
}

private Object LiteralExpression():
{
	Token value;
}
{
	(
		value = <FALSE>
		|
		value = <TRUE>
		|
		value = <INT>
		|
		value = <FLOAT>
		|
		value = <STRING>
	)

	{
		return PythonParserUtil.parseValue(value);
	}
}

private Array ListMakerExpression():
{
	Object predicate;
	
	List<Object> values = new ArrayList<Object>();
}
{
	<LBRACKET> predicate = UnaryExpression() { values.add(asValue(predicate)); } ( <COMMA> predicate = UnaryExpression() { values.add(asValue(predicate)); } )* <RBRACKET>
	
	{
		return createArray(values);
	}
}
