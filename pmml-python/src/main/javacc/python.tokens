SPECIAL_TOKEN:
{
	" "
	|
	"\t"
}

TOKEN:
{
	< NEWLINE: "\n" >
}

TOKEN:
{
	< LPAREN: "(" >
	|
	< RPAREN: ")" >
}

TOKEN:
{
	< OR: "or" >
	|
	< AND: "and" >
	|
	< NOT: "not" >
}

TOKEN:
{
	< EQUAL: "==" >
	|
	< NOT_EQUAL: "!=" >
	|
	< LESS_THAN: "<" >
	|
	< LESS_OR_EQUAL: "<=" >
	|
	< GREATER_THAN: ">" >
	|
	< GREATER_OR_EQUAL: ">=" >
}

TOKEN:
{
	< ASSIGN: "=" >
}

TOKEN:
{
	< PLUS: "+" >
	|
	< MINUS: "-" >
	|
	< MULTIPLY: "*" >
	|
	< DIVIDE: "/" >
	|
	< MODULO: "%" >
	|
	< TILDE: "~" >
}

TOKEN:
{
	< LBRACKET: "[" >
	|
	< RBRACKET: "]" >
}

TOKEN:
{
	< COMMA: "," >
	|
	< DOT: "." >
	|
	< COLON: ":" >
	|
	< SEMICOLON: ";" >
}

TOKEN:
{
	< FALSE: "False" >
	|
	< NA: "NA" >
	|
	< NAN:
		"nan"
		|
		"NaN"
		|
		"NAN"
	>
	|
	< NAT: "NaT" >
	|
	< NONE: "None" >
	|
	< TRUE: "True" >
}

TOKEN:
{
	< DEF: "def" >
	|
	< ELIF: "elif" >
	|
	< ELSE: "else" >
	|
	< IF: "if" >
	|
	< IN: "in" >
	|
	< IS: "is" >
	|
	< RETURN: "return" >
}

TOKEN:
{
	< INT:
		"0"
		|
		<NONZERO_DIGIT> (<DIGIT>)* ( ["l", "L"] )?
	>
	|
	< FLOAT:
		(<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
		|
		"." (<DIGIT>)+ (<EXPONENT>)?
		|
		(<DIGIT>)+ <EXPONENT>
	>
	|
	< NAME: <LETTER> (<LETTER> | <DIGIT>)* >
	|
	< STRING:
		"\"" (~["\""])* "\""
		|
		"\'" (~["\'"])* "\'"
	>
	|
	< #DIGIT: ["0" - "9"] >
	|
	< #NONZERO_DIGIT: ["1" - "9"] >
	|
	< #LETTER: ["a" - "z", "A" - "Z", "_"]>
	|
	< #EXPONENT: ["e", "E"] (["+", "-"])? (<DIGIT>)+ >
}

private Token Sign():
{
	Token token;
}
{
	(
		token = <PLUS> 
		|
		token = <MINUS>
	)

	{
		return token;
	}
}