/*
 * Copyright (c) 2017 Villu Ruusmann
 *
 * This file is part of JPMML-Python
 *
 * JPMML-Python is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPMML-Python is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with JPMML-Python.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.8";
	STATIC = false;
	BUILD_TOKEN_MANAGER = false;
}

PARSER_BEGIN(ExpressionTranslator)
package org.jpmml.python;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.common.collect.Iterables;
import org.dmg.pmml.Apply;
import org.dmg.pmml.Constant;
import org.dmg.pmml.DataType;
import org.dmg.pmml.DerivedField;
import org.dmg.pmml.Expression;
import org.dmg.pmml.FieldRef;
import org.dmg.pmml.PMMLFunctions;
import org.jpmml.converter.Feature;
import org.jpmml.converter.PMMLUtil;
import org.jpmml.converter.TypeUtil;
import org.jpmml.converter.visitors.ExpressionCompactor;

public class ExpressionTranslator extends AbstractTranslator {

	public ExpressionTranslator(Scope scope){
		this(new NullProvider());

		setScope(scope);
	}

	public DerivedField translateDef(String string){
		ReInit(new StringProvider(ensureTerminator(string)));

		DerivedField derivedField;

		try {
			derivedField = translateDefInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python function definition \'" + toSingleLine(string) + "\' is either invalid or not supported", pe);
		}

		return derivedField;
	}

	public Expression translateStatement(String string){
		return translateStatement(string, true);
	}

	public Expression translateStatement(String string, boolean compact){
		ReInit(new StringProvider(ensureTerminator(string)));

		Expression statement;

		try {
			statement = translateStatementInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python statement \'" + toSingleLine(string) + "\' is either invalid or not supported", pe);
		}

		if(compact){
			statement = compact(statement);
		}

		return statement;
	}

	public Expression translateExpression(String string){
		return translateExpression(string, true);
	}

	public Expression translateExpression(String string, boolean compact){
		ReInit(new StringProvider(string));

		Expression expression;

		try {
			expression = translateExpressionInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python expression \'" + toSingleLine(string) + "\' is either invalid or not supported", pe);
		}

		if(compact){
			expression = compact(expression);
		}

		return expression;
	}

	public Constant encodeConstant(String dottedName){

		switch(dottedName){
			case "math.e":
			case "numpy.e":
				return PMMLUtil.createConstant(Math.E, DataType.DOUBLE);
			case "numpy.NZERO":
				return PMMLUtil.createConstant(-0.0d, DataType.DOUBLE);
			case "math.pi":
			case "numpy.pi":
				return PMMLUtil.createConstant(Math.PI, DataType.DOUBLE);
			case "numpy.PZERO":
				return PMMLUtil.createConstant(0.0, DataType.DOUBLE);
			default:
				break;
		}

		switch(dottedName){
			// Math
			case "math.nan":
			// Numpy
			case "numpy.nan":
			case "numpy.NaN":
			case "numpy.NAN":
			// Pandas
			case "pandas.NA":
			case "pandas.NaT":
				return PMMLUtil.createMissingConstant();
			default:
				break;
		}

		throw new IllegalArgumentException("Constant \'" + dottedName + "\' is not supported");
	}

	static
	public Expression compact(Expression expression){
		ExpressionCompactor expressionCompactor = new ExpressionCompactor();

		expressionCompactor.applyTo(expression);

		return expression;
	}

	static
	private String translateRelationalOperator(Token operator) throws ParseException {

		switch(operator.kind){
			case EQUAL:
				return PMMLFunctions.EQUAL;
			case NOT_EQUAL:
				return PMMLFunctions.NOTEQUAL;
			case LESS_THAN:
				return PMMLFunctions.LESSTHAN;
			case LESS_OR_EQUAL:
				return PMMLFunctions.LESSOREQUAL;
			case GREATER_THAN:
				return PMMLFunctions.GREATERTHAN;
			case GREATER_OR_EQUAL:
				return PMMLFunctions.GREATEROREQUAL;
			default:
				throw new ParseException();
		}
	}

	static
	private String translateArithmeticOperator(Token operator){

		switch(operator.kind){
			case MODULO:
				return PMMLFunctions.MODULO;
			default:
				return operator.image;
		}
	}

	static
	private Apply translateTrailerFunction(Expression expression, String name, List<Expression> arguments){

		if(("startswith").equals(name) || ("endswith").equals(name)){
			ClassDictUtil.checkSize(1, arguments);

			Expression argument = arguments.get(0);
			if(!(argument instanceof Constant)){
				throw new IllegalArgumentException();
			}

			Constant constant = (Constant)argument;
			if(constant.getDataType() != DataType.STRING){
				throw new IllegalArgumentException();
			}

			String value = (String)constant.getValue();

			switch(name){
				case "startswith":
					return PMMLUtil.createApply(PMMLFunctions.EQUAL,
						translateStringSlice(expression, 0, value.length()),
						constant
					);
				case "endswith":
					return PMMLUtil.createApply(PMMLFunctions.EQUAL,
						translateStringSlice(expression, -value.length(), null),
						constant
					);
				default:
					break;
			}
		} else

		if(("lower").equals(name) || ("upper").equals(name)){
			ClassDictUtil.checkSize(0, arguments);

			switch(name){
				case "lower":
					return PMMLUtil.createApply(PMMLFunctions.LOWERCASE, expression);
				case "upper":
					return PMMLUtil.createApply(PMMLFunctions.UPPERCASE, expression);
				default:
					break;
			}
		} else

		if(("strip").equals(name)){
			ClassDictUtil.checkSize(0, arguments);

			switch(name){
				case "strip":
					return PMMLUtil.createApply(PMMLFunctions.TRIMBLANKS, expression);
				default:
					break;
			}
		}

		throw new IllegalArgumentException("Function \'" + name + "\' is not supported");
	}

	static
	private Expression translateStringSlice(Expression expression, Integer startPos, Integer stopPos){

		if(startPos == null && stopPos == null){
			return expression;
		}

		Expression offsetExpression;

		if(startPos != null && startPos >= 0){
			offsetExpression = PMMLUtil.createConstant(startPos + 1, DataType.INTEGER);
		} else

		if(startPos != null && startPos < 0){
			offsetExpression = PMMLUtil.createApply(PMMLFunctions.MAX,
				PMMLUtil.createApply(PMMLFunctions.SUBTRACT, 
					PMMLUtil.createApply(PMMLFunctions.STRINGLENGTH, expression),
					PMMLUtil.createConstant((-startPos) - 1, DataType.INTEGER)
				),
				PMMLUtil.createConstant(1, DataType.INTEGER)
			);
		} else

		{
			offsetExpression = PMMLUtil.createConstant(1, DataType.INTEGER);
		} // End if

		Expression lengthExpression;

		if(stopPos != null && stopPos >= 0){

			if(startPos != null && startPos >= 0){
				lengthExpression = PMMLUtil.createConstant(Math.max(stopPos - startPos, 0), DataType.INTEGER);
			} else

			if(startPos != null && startPos < 0){
				lengthExpression = PMMLUtil.createConstant(0, DataType.INTEGER);
			} else

			{
				lengthExpression = PMMLUtil.createConstant(stopPos, DataType.INTEGER);
			}
		} else

		if(stopPos != null && stopPos < 0){

			if(startPos != null && startPos >= 0){
				lengthExpression = PMMLUtil.createApply(PMMLFunctions.MAX,
					PMMLUtil.createApply(PMMLFunctions.SUBTRACT,
						PMMLUtil.createApply(PMMLFunctions.STRINGLENGTH, expression),
						PMMLUtil.createConstant(startPos + (-stopPos))
					),
					PMMLUtil.createConstant(0, DataType.INTEGER)
				);
			} else

			if(startPos != null && startPos < 0){
				lengthExpression = PMMLUtil.createConstant(Math.max(stopPos - startPos, 0), DataType.INTEGER);
			} else

			{
				lengthExpression = PMMLUtil.createApply(PMMLFunctions.MAX,
					PMMLUtil.createApply(PMMLFunctions.SUBTRACT,
						PMMLUtil.createApply(PMMLFunctions.STRINGLENGTH, expression),
						PMMLUtil.createConstant(-stopPos)
					),
					PMMLUtil.createConstant(0, DataType.INTEGER)
				);
			}
		} else

		{
			lengthExpression = PMMLUtil.createConstant(Integer.MAX_VALUE, DataType.INTEGER);
		}

		return PMMLUtil.createApply(PMMLFunctions.SUBSTRING, expression, offsetExpression, lengthExpression);
	}

	static
	private String ensureTerminator(String string){

		if(string.endsWith("\n")){

			if(!string.endsWith("\n\n")){
				string += "\n";
			}
		}

		return string;
	}

	static
	private Expression getOnlyStatement(List<Expression> statements){

		for(int i = 0; i < statements.size(); i++){
			Expression statement = statements.get(i);

			if(statement != null){
				statements = statements.subList(i, statements.size());

				break;
			}
		}

		return Iterables.getOnlyElement(statements);
	}

	static
	private class Block extends ArrayList<Expression> {

		private Block(List<Expression> statements){
			super(statements);
		}
	}
}
PARSER_END(ExpressionTranslator)

@python.tokens@

@python.productions@

private DerivedField translateDefInternal():
{
	DerivedField derivedField;
}
{
	derivedField = Def() ( <NEWLINE> )* <EOF>

	{
		return derivedField;
	}
}

private Expression translateStatementInternal():
{
	Expression expression;
}
{
	expression = Statement() ( <NEWLINE> )* <EOF>

	{
		return expression;
	}
}

private Expression translateExpressionInternal():
{
	Expression expression;
}
{
	expression = Expression() <EOF>

	{
		return expression;
	}
}

private DerivedField Def():
{
	Token name;
	List<Token> parameters;
	Block block;
}
{
	<DEF> name = <NAME> parameters = Parameters() <COLON> block = Block()

	{
		return createDerivedField(name.image, getOnlyStatement(block));
	}
}

private List<Token> Parameters():
{
	Token name;
	List<Token> names = new ArrayList();
}
{
	(
		LOOKAHEAD(<LPAREN> <RPAREN>)
		<LPAREN> <RPAREN>
		|
		<LPAREN> name = <NAME> { names.add(name); } ( <COMMA> name = <NAME> { names.add(name); } )* <RPAREN>
	)

	{
		return names;
	}
}

private Block Block():
{
	List<Expression> statements;
}
{
	(
		<NEWLINE> Indent() statements = Statements() Dedent()
		|
		statements = SimpleStatements()
	)
	
	{
		return new Block(statements);
	}
}

JAVACODE
private void Indent(){
}

JAVACODE
private void Dedent(){
}

private List<Expression> Statements():
{
	Expression statement;
	List<Expression> statements = new ArrayList<>();
}
{
	( statement = Statement() { statements.add(statement); } )+

	{
		return statements;
	}
}

private Expression Statement():
{
	Expression statement;
	List<Expression> statements;
}
{
	(
		statement = CompoundStatement() <NEWLINE>
		|
		statements = SimpleStatements() { statement = getOnlyStatement(statements); }
	)

	{
		return statement;
	}
}

private Expression CompoundStatement():
{
	Expression statement;
}
{
	statement = IfStatement()

	{
		return statement;
	}
}

private List<Expression> SimpleStatements():
{
	Expression statement;
	List<Expression> statements = new ArrayList<>();
}
{
	statement = SimpleStatement() { statements.add(statement); } ( <SEMICOLON> statement = SimpleStatement() { statements.add(statement); } )* <NEWLINE>
	
	{
		return statements;
	}
}

private Expression SimpleStatement():
{
	Expression expression;
}
{
	(
		expression = Assignment()
		|
		expression = ReturnStatement()
		|
		expression = ImportStatement()
	)
	
	{
		return expression;
	}
}

private Apply IfStatement():
{
	Expression condition;
	Block block;

	Apply if_statement;
	Apply elif_statement;

	Apply tail;
}
{
	<IF> condition = Expression() <COLON> block = Block() { if_statement = PMMLUtil.createApply(PMMLFunctions.IF, condition, getOnlyStatement(block)); tail = if_statement; } ( elif_statement = ElIfStatement() { tail.addExpressions(elif_statement); tail = elif_statement; } )* ( block = ElseBlock() { tail.addExpressions(getOnlyStatement(block)); } )?

	{
		return if_statement;
	}
}

private Apply ElIfStatement():
{
	Expression condition;
	Block block;
}
{
	<ELIF> condition = Expression() <COLON> block = Block()

	{
		return PMMLUtil.createApply(PMMLFunctions.IF, condition, getOnlyStatement(block));
	}
}

private Block ElseBlock():
{
	Block block;
}
{
	<ELSE> <COLON> block = Block()

	{
		return block;
	}
}

private Expression Assignment():
{
	Token name;
	Expression expression;
}
{
	(
		LOOKAHEAD(<NAME> <ASSIGN>)
		name = <NAME> <ASSIGN>
		|
		{ name = null; }
	)
	expression = Expression()
	
	{
		if(name != null){
			DerivedField derivedField = createDerivedField(name.image, expression);
		}

		return null;
	}
}

private Expression ReturnStatement():
{
	Expression expression;
}
{
	<RETURN> expression = Expression()
	
	{
		return expression;
	}
}

private Expression ImportStatement():
{}
{
	<IMPORT> DottedAsName() ( <COMMA> DottedAsName() )*

	{
		return null;
	}
}

private void DottedAsName():
{
	String dottedName;
	Token name = null;
}
{
	dottedName = DottedName() ( <AS> name = <NAME> )?

	{
		Map<String, String> moduleImports = getModuleImports();

		moduleImports.put(name != null ? name.image : dottedName, dottedName);
	}
}
	
private Expression Expression():
{
	Expression expression;
}
{
	expression = IfElseExpression()

	{
		return expression;
	}
}

private Expression IfElseExpression():
{
	Expression left;
	Expression center;
	Expression right;
}
{
	left = LogicalOrExpression() ( <IF> center = Expression() <ELSE> right = Expression() { left = PMMLUtil.createApply(PMMLFunctions.IF, center, left, right); } )?

	{
		return left;
	}
}

private Expression LogicalOrExpression():
{
	Expression left;
	Expression right;
}
{
	left = LogicalAndExpression() ( <OR> right = LogicalAndExpression() { left = PMMLUtil.createApply(PMMLFunctions.OR, left, right); } )*

	{
		return left;
	}
}

private Expression LogicalAndExpression():
{
	Expression left;
	Expression right;
}
{
	left = NegationExpression() ( <AND> right = NegationExpression() { left = PMMLUtil.createApply(PMMLFunctions.AND, left, right); } )*

	{
		return left;
	}
}

private Expression NegationExpression():
{
	Token operator = null;
	Expression expression;
}
{
	( operator = <NOT> )? expression = ComparisonExpression()

	{
		if(operator != null){
			return PMMLUtil.createApply(PMMLFunctions.NOT, expression);
		}

		return expression;
	}
}

private Expression ComparisonExpression():
{
	Expression left;
	Token operator;
	Object right;
}
{
	left = AdditiveExpression()
	(
		LOOKAHEAD(<IS> <NONE>)
		<IS> <NONE> { left = PMMLUtil.createApply(PMMLFunctions.ISMISSING, left); }
		|
		<IS> <NOT> <NONE> { left = PMMLUtil.createApply(PMMLFunctions.ISNOTMISSING, left); }
		|
		<IN> right = ListMakerExpression() { left = PMMLUtil.createApply(PMMLFunctions.ISIN, left).addExpressions((Expression[])right); }
		|
		<NOT> <IN> right = ListMakerExpression() { left = PMMLUtil.createApply(PMMLFunctions.ISNOTIN, left).addExpressions((Expression[])right); }
		|
		((operator = <EQUAL> | operator = <NOT_EQUAL> | operator = <LESS_THAN> | operator = <LESS_OR_EQUAL> | operator = <GREATER_THAN> | operator = <GREATER_OR_EQUAL>) right = AdditiveExpression() { left = PMMLUtil.createApply(translateRelationalOperator(operator), left, (Expression)right); } )?
	)

	{
		return left;
	}
}

private Expression AdditiveExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = MultiplicativeExpression() ((operator = <PLUS> | operator = <MINUS>) right = MultiplicativeExpression() {

		if((operator.kind == PLUS) && (TypeUtil.isString(left, this) && TypeUtil.isString(right, this))){
			left = PMMLUtil.createApply(PMMLFunctions.CONCAT, left, right);
		} else

		{
			left = PMMLUtil.createApply(translateArithmeticOperator(operator), left, right);
		}
	})*

	{
		return left;
	}
}

private Expression MultiplicativeExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = UnaryExpression() ((operator = <MULTIPLY> | operator = <DIVIDE> | operator = <MODULO> ) right = UnaryExpression() { left = PMMLUtil.createApply(translateArithmeticOperator(operator), left, right); } )*

	{
		return left;
	}
}

private Expression UnaryExpression():
{
	Token sign = null;
	Expression expression;
}
{
	(
		sign = Sign() expression = UnaryExpression()
		|
		expression = PrimaryExpression()
	)

	{
		if(sign != null && sign.kind == MINUS){
			expression = PMMLUtil.toNegative(expression);
		}

		return expression;
	}
}

private Expression PrimaryExpression():
{
	String dottedName;
	Expression expression;
}
{
	(
		dottedName = CanonicalizedDottedName()
		(
			LOOKAHEAD(ArrayIndexingExpression())
			expression = ArrayIndexingExpression(dottedName) ( expression = TrailerFunctionInvocationExpression(expression) | expression = StringSlicingExpression(expression) )*
			|
			expression = FunctionInvocationExpression(dottedName) ( expression = TrailerFunctionInvocationExpression(expression) | expression = StringSlicingExpression(expression) )*
			|
			expression = NameInvocationExpression(dottedName) ( expression = StringSlicingExpression(expression) ( expression = TrailerFunctionInvocationExpression(expression) | expression = StringSlicingExpression(expression) )* )?
		)
		|
		expression = ParenthesizedExpression() ( expression = TrailerFunctionInvocationExpression(expression) | expression = StringSlicingExpression(expression) )*
		|
		expression = LiteralExpression()
	)

	{
		return expression;
	}
}

private FieldRef ArrayIndexingExpression(String dottedName):
{
	Token sign = null;
	Token column;

	Feature feature;
}
{
	(
		LOOKAHEAD(<LBRACKET> (Sign())? <INT>)
		<LBRACKET> (sign = Sign())? column = <INT> <RBRACKET> {
			Scope scope = ensureScope();
			
			int colIndex = PythonParserUtil.parseInt(sign, column);
			
			feature = scope.getFeature(dottedName, colIndex);
		}
		|
		<LBRACKET> column = String() <RBRACKET> {
			Scope scope = ensureScope();
			
			String colName = PythonParserUtil.parseString(column);
			
			feature = scope.getFeature(dottedName, colName);
		}
	)

	{
		return feature.ref();
	}
}

private Expression FunctionInvocationExpression(String dottedName):
{
	List<Expression> arguments;
}
{
	arguments = Arguments()

	{
		Scope scope = ensureScope();

		int dot = dottedName.lastIndexOf('.');
		if(dot > -1){
			String featureName = dottedName.substring(0, dot);
			String functionName = dottedName.substring(dot + 1);

			Feature feature = scope.resolveFeature(featureName);
			if(feature != null){
				return translateTrailerFunction(feature.ref(), functionName, arguments);
			}
		}

		return encodeFunction(dottedName, arguments);
	}
}

private Apply TrailerFunctionInvocationExpression(Expression expression):
{
	Token name;
	List<Expression> arguments;
}
{
	<DOT> name = <NAME> arguments = Arguments()

	{
		return translateTrailerFunction(expression, name.image, arguments);
	}
}

private List<Expression> Arguments():
{
	Expression expression;
	List<Expression> expressions = new ArrayList<Expression>();
}
{
	(
		LOOKAHEAD(<LPAREN> <RPAREN>)
		<LPAREN> <RPAREN>
		|
		<LPAREN> expression = Expression() { expressions.add(expression); } ( <COMMA> expression = Expression() { expressions.add(expression); } )* <RPAREN>
	)

	{
		return expressions;
	}
}

private Expression StringSlicingExpression(Expression expression):
{
	Token startSign = null;
	Token start = null;
	Token stopSign = null;
	Token stop = null;
}
{
	<LBRACKET> ((startSign = Sign())? start = <INT>)? <COLON> ((stopSign = Sign())? stop = <INT>)? <RBRACKET>

	{
		Integer startPos = null;
		if(start != null){
			startPos = PythonParserUtil.parseInt(startSign, start);
		}

		Integer stopPos = null;
		if(stop != null){
			stopPos = PythonParserUtil.parseInt(stopSign, stop);
		}

		return translateStringSlice(expression, startPos, stopPos);
	}
}

private Expression NameInvocationExpression(String dottedName):
{
}
{
	{
		int dot = dottedName.indexOf('.');
		if(dot > -1){
			return encodeConstant(dottedName);
		}

		Scope scope = ensureScope();

		Feature feature = scope.getFeature(dottedName);

		return feature.ref();
	}
}

private Expression ParenthesizedExpression():
{
	Expression expression;
}
{
	<LPAREN> expression = Expression() <RPAREN>

	{
		return expression;
	}
}

private Constant LiteralExpression():
{
	Token value;
	DataType dataType;
	Boolean missing = null;
}
{
	(
		value = <NONE> { dataType = null; missing = Boolean.TRUE; }
		|
		value = <FALSE> { dataType = DataType.BOOLEAN; }
		|
		value = <TRUE> { dataType = DataType.BOOLEAN; }
		|
		value = <INT> { dataType = DataType.INTEGER; }
		|
		value = <FLOAT> { dataType = DataType.DOUBLE; }
		|
		value = String() { dataType = DataType.STRING; }
	)

	{
		Constant constant = new Constant()
			.setValue(PythonParserUtil.parseValue(value))
			.setDataType(dataType)
			.setMissing(missing);

		return constant;
	}
}

private Expression[] ListMakerExpression():
{
	Expression expression;
	List<Expression> expressions = new ArrayList<Expression>();
}
{
	<LBRACKET> expression = Expression() { expressions.add(expression); } ( <COMMA> expression = Expression() { expressions.add(expression); } )* <RBRACKET>

	{
		return expressions.toArray(new Expression[expressions.size()]);
	}
}
