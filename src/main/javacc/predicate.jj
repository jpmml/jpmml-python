/*
 * Copyright (c) 2018 Villu Ruusmann
 *
 * This file is part of JPMML-Python
 *
 * JPMML-Python is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPMML-Python is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with JPMML-Python.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.8";
	STATIC = false;
}

PARSER_BEGIN(PredicateTranslator)
package org.jpmml.python;

import java.util.ArrayList;
import java.util.List;

import org.dmg.pmml.Array;
import org.dmg.pmml.CompoundPredicate;
import org.dmg.pmml.False;
import org.dmg.pmml.FieldName;
import org.dmg.pmml.Predicate;
import org.dmg.pmml.SimplePredicate;
import org.dmg.pmml.SimpleSetPredicate;
import org.dmg.pmml.True;
import org.jpmml.converter.Feature;
import org.jpmml.converter.PMMLUtil;

public class PredicateTranslator extends AbstractTranslator {

	static
	public Predicate translate(String string, Scope scope){
		Predicate predicate;

		try {
			PredicateTranslator predicateTranslator = new PredicateTranslator(string);
			predicateTranslator.setScope(scope);

			predicate = predicateTranslator.translatePredicateInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python predicate \'" + string + "\' is either invalid or not supported", pe);
		}

		return predicate;
	}

	static
	private SimplePredicate.Operator translateRelationalOperator(Token operator){
		
		switch(operator.kind){
			case EQUAL:
				return SimplePredicate.Operator.EQUAL;
			case NOT_EQUAL:
				return SimplePredicate.Operator.NOT_EQUAL;
			case LESS_THAN:
				return SimplePredicate.Operator.LESS_THAN;
			case LESS_OR_EQUAL:
				return SimplePredicate.Operator.LESS_OR_EQUAL;
			case GREATER_THAN:
				return SimplePredicate.Operator.GREATER_THAN;
			case GREATER_OR_EQUAL:
				return SimplePredicate.Operator.GREATER_OR_EQUAL;
			default:
				throw new IllegalArgumentException(operator.image);
		}
	}

	static
	private Object translateValue(Token value){
		String image = value.image;
		
		switch(value.kind){
			case FALSE:
				return False.INSTANCE;
			case INT:
				if(image.endsWith("l") || image.endsWith("L")){
					image = image.substring(0, image.length() - 1);
				}
				break;
			case STRING:
				image = image.substring(1, image.length() - 1);
				break;
			case TRUE:
				return True.INSTANCE;
			default:
				break;
		}
		
		return image;
	}

	static
	private CompoundPredicate createCompoundPredicate(CompoundPredicate.BooleanOperator booleanOperator, Predicate... predicates){
		CompoundPredicate compoundPredicate = new CompoundPredicate(booleanOperator, null)
			.addPredicates(predicates);

		return compoundPredicate;
	}
}
PARSER_END(PredicateTranslator)

SPECIAL_TOKEN:
{
	" "
	|
	"\t"
}

TOKEN:
{
	< LPAREN: "(" >
	|
	< RPAREN: ")" >
}

TOKEN:
{
	< OR: "or" >
	|
	< AND: "and" >
	|
	< NOT: "not" >
}

TOKEN:
{
	< IS: "is" >
	|
	< IN: "in" >
	|
	< EQUAL: "==" >
	|
	< NOT_EQUAL: "!=" >
	|
	< LESS_THAN: "<" >
	|
	< LESS_OR_EQUAL: "<=" >
	|
	< GREATER_THAN: ">" >
	|
	< GREATER_OR_EQUAL: ">=" >
}

TOKEN:
{
	< PLUS: "+" >
	|
	< MINUS: "-" >
}

TOKEN:
{
	< LBRACKET: "[" >
	|
	< RBRACKET: "]" >
}

TOKEN:
{
	< COMMA: "," >
}

TOKEN:
{
	< FALSE: "False" >
	|
	< NONE: "None" >
	|
	< TRUE: "True" >
}

TOKEN:
{
	< INT:
		"0"
		|
		<NONZERO_DIGIT> (<DIGIT>)* ( ["l", "L"] )?
	>
	|
	< FLOAT:
		(<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
		|
		"." (<DIGIT>)+ (<EXPONENT>)?
		|
		(<DIGIT>)+ <EXPONENT>
	>
	|
	< NAME: <LETTER> (<LETTER> | <DIGIT>)* >
	|
	< STRING:
		"\"" (~["\""])* "\""
		|
		"\'" (~["\'"])* "\'"
	>
	|
	< #DIGIT: ["0" - "9"] >
	|
	< #NONZERO_DIGIT: ["1" - "9"] >
	|
	< #LETTER: ["a" - "z", "A" - "Z", "_"]>
	|
	< #EXPONENT: ["e", "E"] (["+", "-"])? (<DIGIT>)+ >
}

private Predicate translatePredicateInternal():
{
	Predicate predicate;
}
{
	predicate = Predicate() <EOF>

	{
		return predicate;
	}
}

Predicate Predicate():
{
	Predicate predicate;
}
{
	predicate = LogicalOrExpression()

	{
		return predicate;
	}
}

Predicate LogicalOrExpression():
{
	Predicate left;
	Predicate right;
}
{
	left = LogicalAndExpression() ( <OR> right = LogicalAndExpression() { left = createCompoundPredicate(CompoundPredicate.BooleanOperator.OR, left, right); } )*

	{
		return left;
	}
}

Predicate LogicalAndExpression():
{
	Predicate left;
	Predicate right;
}
{
	left = ComparisonExpression() ( <AND> right = ComparisonExpression() { left = createCompoundPredicate(CompoundPredicate.BooleanOperator.AND, left, right); } )*

	{
		return left;
	}
}

Predicate ComparisonExpression():
{
	Object left;
	Token operator = null;
	Object right;
}
{
	(
		LOOKAHEAD(PrimaryExpression() <IS> <NONE>)
		left = PrimaryExpression() <IS> <NONE> { left = new SimplePredicate((FieldName)left, SimplePredicate.Operator.IS_MISSING, null); }
		|
		LOOKAHEAD(PrimaryExpression() <IS> <NOT> <NONE>)
		left = PrimaryExpression() <IS> <NOT> <NONE> { left = new SimplePredicate((FieldName)left, SimplePredicate.Operator.IS_NOT_MISSING, null); }
		|
		LOOKAHEAD(PrimaryExpression() <IN>)
		left = PrimaryExpression() <IN> right = ListMakerExpression() { left = new SimpleSetPredicate((FieldName)left, SimpleSetPredicate.BooleanOperator.IS_IN, (Array)right); }
		|
		LOOKAHEAD(PrimaryExpression() <NOT> <IN>)
		left = PrimaryExpression() <NOT> <IN> right = ListMakerExpression() { left = new SimpleSetPredicate((FieldName)left, SimpleSetPredicate.BooleanOperator.IS_NOT_IN, (Array)right); }
		|
		left = PrimaryExpression() ((operator = <EQUAL> | operator = <NOT_EQUAL> | operator = <LESS_THAN> | operator = <LESS_OR_EQUAL> | operator = <GREATER_THAN> | operator = <GREATER_OR_EQUAL>) right = UnaryExpression() { left = new SimplePredicate((FieldName)left, translateRelationalOperator(operator), (String)right); } )?
	)

	{
		return (Predicate)left;
	}
}

Object UnaryExpression():
{
	Token sign = null;
	Object result;
}
{
	(
		sign = <PLUS> result = UnaryExpression()
		|
		sign = <MINUS> result = UnaryExpression()
		|
		result = PrimaryExpression()
	)

	{
		if(sign != null && sign.kind == MINUS){
			String value = (String)result;

			if(value.startsWith("-")){
				value = value.substring(1);
			} else

			{
				value = ("-" + value);
			}

			result = value;
		}

		return result;
	}
}

Object PrimaryExpression():
{
	Object result;
}
{
	(
		LOOKAHEAD(<NAME> <LBRACKET>)
		result = ArrayIndexingExpression()
		|
		result = NameInvocationExpression()
		|
		result = ParenthesizedExpression()
		|
		result = LiteralExpression()
	)

	{
		return result;
	}
}

FieldName ArrayIndexingExpression():
{
	Token name;
	Token sign = null;
	Token column;
}
{
	(
		LOOKAHEAD(<NAME> <LBRACKET> (<PLUS> | <MINUS>)? <INT>)
		name = <NAME> <LBRACKET> (sign = <PLUS> | sign = <MINUS>)? column = <INT> <RBRACKET>
		|
		name = <NAME> <LBRACKET> column = <STRING> <RBRACKET>
	)

	{
		Scope scope = ensureScope();

		Feature feature = null;

		switch(column.kind){
			case PredicateTranslatorConstants.INT:
				{
					int colIndex = Integer.parseInt(sign != null ? (sign.image + column.image) : column.image);

					feature = scope.getFeature(FieldName.create(name.image), colIndex);
				}
				break;
			case PredicateTranslatorConstants.STRING:
				{
					String colName = column.image.substring(1, column.image.length() - 1);

					feature = scope.getFeature(FieldName.create(name.image), FieldName.create(colName));
				}
				break;
			default:
				break;
		}

		return feature.getName();
	}
}

FieldName NameInvocationExpression():
{
	Token name;
}
{
	name = <NAME>

	{
		Scope scope = ensureScope();

		Feature feature = scope.getFeature(FieldName.create(name.image));

		return feature.getName();
	}
}

Predicate ParenthesizedExpression():
{
	Predicate predicate;
}
{
	<LPAREN> predicate = Predicate() <RPAREN>

	{
		return predicate;
	}
}

Object LiteralExpression():
{
	Token value;
}
{
	(
		value = <FALSE>
		|
		value = <TRUE>
		|
		value = <INT>
		|
		value = <FLOAT>
		|
		value = <STRING>
	)

	{
		return translateValue(value);
	}
}

Array ListMakerExpression():
{
	Object predicate;
	
	List<String> values = new ArrayList<String>();
}
{
	<LBRACKET> predicate = UnaryExpression() { values.add((String)predicate); } ( <COMMA> predicate = UnaryExpression() { values.add((String)predicate); } )* <RBRACKET>
	
	{
		return PMMLUtil.createStringArray(values);
	}
}
